package alex.learn.avrodomain;
/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
@SuppressWarnings("all")
/** A pair of strings. */
@org.apache.avro.specific.AvroGenerated
public class AgPerson extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AgPerson\",\"doc\":\"A pair of strings.\",\"fields\":[{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"pname\",\"type\":\"string\",\"default\":\"unknown\"},{\"name\":\"age\",\"type\":\"int\",\"order\":\"descending\"},{\"name\":\"favnumber\",\"type\":[\"int\",\"null\"]},{\"name\":\"favcolor\",\"type\":[\"string\",\"null\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence id;
  @Deprecated public java.lang.CharSequence pname;
  @Deprecated public int age;
  @Deprecated public java.lang.Integer favnumber;
  @Deprecated public java.lang.CharSequence favcolor;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public AgPerson() {}

  /**
   * All-args constructor.
   */
  public AgPerson(java.lang.CharSequence id, java.lang.CharSequence pname, java.lang.Integer age, java.lang.Integer favnumber, java.lang.CharSequence favcolor) {
    this.id = id;
    this.pname = pname;
    this.age = age;
    this.favnumber = favnumber;
    this.favcolor = favcolor;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return pname;
    case 2: return age;
    case 3: return favnumber;
    case 4: return favcolor;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.CharSequence)value$; break;
    case 1: pname = (java.lang.CharSequence)value$; break;
    case 2: age = (java.lang.Integer)value$; break;
    case 3: favnumber = (java.lang.Integer)value$; break;
    case 4: favcolor = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   */
  public java.lang.CharSequence getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.CharSequence value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'pname' field.
   */
  public java.lang.CharSequence getPname() {
    return pname;
  }

  /**
   * Sets the value of the 'pname' field.
   * @param value the value to set.
   */
  public void setPname(java.lang.CharSequence value) {
    this.pname = value;
  }

  /**
   * Gets the value of the 'age' field.
   */
  public java.lang.Integer getAge() {
    return age;
  }

  /**
   * Sets the value of the 'age' field.
   * @param value the value to set.
   */
  public void setAge(java.lang.Integer value) {
    this.age = value;
  }

  /**
   * Gets the value of the 'favnumber' field.
   */
  public java.lang.Integer getFavnumber() {
    return favnumber;
  }

  /**
   * Sets the value of the 'favnumber' field.
   * @param value the value to set.
   */
  public void setFavnumber(java.lang.Integer value) {
    this.favnumber = value;
  }

  /**
   * Gets the value of the 'favcolor' field.
   */
  public java.lang.CharSequence getFavcolor() {
    return favcolor;
  }

  /**
   * Sets the value of the 'favcolor' field.
   * @param value the value to set.
   */
  public void setFavcolor(java.lang.CharSequence value) {
    this.favcolor = value;
  }

  /** Creates a new AgPerson RecordBuilder */
  public static AgPerson.Builder newBuilder() {
    return new AgPerson.Builder();
  }
  
  /** Creates a new AgPerson RecordBuilder by copying an existing Builder */
  public static AgPerson.Builder newBuilder(AgPerson.Builder other) {
    return new AgPerson.Builder(other);
  }
  
  /** Creates a new AgPerson RecordBuilder by copying an existing AgPerson instance */
  public static AgPerson.Builder newBuilder(AgPerson other) {
    return new AgPerson.Builder(other);
  }
  
  /**
   * RecordBuilder for AgPerson instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AgPerson>
    implements org.apache.avro.data.RecordBuilder<AgPerson> {

    private java.lang.CharSequence id;
    private java.lang.CharSequence pname;
    private int age;
    private java.lang.Integer favnumber;
    private java.lang.CharSequence favcolor;

    /** Creates a new Builder */
    private Builder() {
      super(AgPerson.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(AgPerson.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.pname)) {
        this.pname = data().deepCopy(fields()[1].schema(), other.pname);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.age)) {
        this.age = data().deepCopy(fields()[2].schema(), other.age);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.favnumber)) {
        this.favnumber = data().deepCopy(fields()[3].schema(), other.favnumber);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.favcolor)) {
        this.favcolor = data().deepCopy(fields()[4].schema(), other.favcolor);
        fieldSetFlags()[4] = true;
      }
    }
    
    /** Creates a Builder by copying an existing AgPerson instance */
    private Builder(AgPerson other) {
            super(AgPerson.SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.pname)) {
        this.pname = data().deepCopy(fields()[1].schema(), other.pname);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.age)) {
        this.age = data().deepCopy(fields()[2].schema(), other.age);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.favnumber)) {
        this.favnumber = data().deepCopy(fields()[3].schema(), other.favnumber);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.favcolor)) {
        this.favcolor = data().deepCopy(fields()[4].schema(), other.favcolor);
        fieldSetFlags()[4] = true;
      }
    }

    /** Gets the value of the 'id' field */
    public java.lang.CharSequence getId() {
      return id;
    }
    
    /** Sets the value of the 'id' field */
    public AgPerson.Builder setId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'id' field has been set */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'id' field */
    public AgPerson.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'pname' field */
    public java.lang.CharSequence getPname() {
      return pname;
    }
    
    /** Sets the value of the 'pname' field */
    public AgPerson.Builder setPname(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.pname = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'pname' field has been set */
    public boolean hasPname() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'pname' field */
    public AgPerson.Builder clearPname() {
      pname = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'age' field */
    public java.lang.Integer getAge() {
      return age;
    }
    
    /** Sets the value of the 'age' field */
    public AgPerson.Builder setAge(int value) {
      validate(fields()[2], value);
      this.age = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'age' field has been set */
    public boolean hasAge() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'age' field */
    public AgPerson.Builder clearAge() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'favnumber' field */
    public java.lang.Integer getFavnumber() {
      return favnumber;
    }
    
    /** Sets the value of the 'favnumber' field */
    public AgPerson.Builder setFavnumber(java.lang.Integer value) {
      validate(fields()[3], value);
      this.favnumber = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'favnumber' field has been set */
    public boolean hasFavnumber() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'favnumber' field */
    public AgPerson.Builder clearFavnumber() {
      favnumber = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'favcolor' field */
    public java.lang.CharSequence getFavcolor() {
      return favcolor;
    }
    
    /** Sets the value of the 'favcolor' field */
    public AgPerson.Builder setFavcolor(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.favcolor = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'favcolor' field has been set */
    public boolean hasFavcolor() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'favcolor' field */
    public AgPerson.Builder clearFavcolor() {
      favcolor = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    public AgPerson build() {
      try {
        AgPerson record = new AgPerson();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.pname = fieldSetFlags()[1] ? this.pname : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.age = fieldSetFlags()[2] ? this.age : (java.lang.Integer) defaultValue(fields()[2]);
        record.favnumber = fieldSetFlags()[3] ? this.favnumber : (java.lang.Integer) defaultValue(fields()[3]);
        record.favcolor = fieldSetFlags()[4] ? this.favcolor : (java.lang.CharSequence) defaultValue(fields()[4]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
