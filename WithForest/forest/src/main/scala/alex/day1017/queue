区分队列的三点
1. 是否有界,
2. 是否阻塞,  如果是阻塞队列, 那么在临界情况下, 消费者或生产者线程阻塞, 并发性不好
3. 先进先出, 还是采用优先级, 后者的元素必须实现comparable接口

使用的共同点:
一个线程去添加(生产)元素, 另一个线程去消费元素

Delayed 元素的一个无界阻塞队列，只有在延迟期满时才能从中提取元素。该队列的头部 是延迟期满后保存时间最长的 Delayed 元素。
如果延迟都还没有期满，则队列没有头部，并且 poll 将返回 null。
当一个元素的 getDelay(TimeUnit.NANOSECONDS) 方法返回一个小于等于 0 的值时，将发生到期。
即使无法使用 take 或 poll 移除未到期的元素，也不会将这些元素作为正常元素对待。
例如，size 方法同时返回到期和未到期元素的计数。此队列不允许使用 null 元素。

poll()
获取并移除此队列的头，如果此队列不包含具有已到期延迟时间的元素，则返回 null。

SynchronousQueue
一种阻塞队列, 这种列队没有容量, 本身不能添加任何元素,添加就报错, 而且打印这个队列, 总是空的.
他必须是两个线程同时使用, 一个存入, 一个取出.
本质上说, 这是一种通信工具, 数据是从存入线程直接进入取出线程.


PriorityBlockingQueue
一种采用优先级取出元素的阻塞队列, 它内部的元素本身必须实现Comparable接口.
这种队列在取出元素时, 也就是执行take方法时, 会调用compareTo方法,来实现优先级比较.
存入元素时, 不存在优先级问题.


